#
# Εργαστήριο ΛΣ 1 / Άσκηση 2 / Ερώτηση 2 / 2021-2022
# Ονοματεπώνυμο   : Αθανασίου Βασίλειος Ευάγγελος
# Αριθμός Μητρώου : 19390005
#
-----------------------------------------------------------------------------
# Ερώτηση 2.
# Σε μια εφαρμογή χρειάζεται να δημιουργούμε νέους καταλόγους τους οποίους θα βρίσκει και
# θα χρησιμοποιεί. Γράψτε ένα script με όνομα createpvs το οποίο θα καλείται με παραμέ-
# τρους ROOTFOLDER, no_of_DBFOLDERS, no_of_DATAFOLDERS, USERNAME π.χ.
# createpvs /etc/data 0 5 user555
# το οποίο θα κάνει τα ακόλουθα:
# • Θα ελέγχει τον αριθμό των ορισμάτων ώστε να είναι 4
# • Θα ελέγχει αν υπάρχει ο ROOTFOLDER μέσα στον οποίο θα δημιουργηθούν οι νέοι 
# κατάλογοι
# • Θα ελέγχει αν υπάρχει ο χρήστης USERNAME (μέσα στο αρχείο /etc/passwd)
# • Αν όλοι οι έλεγχοι είναι επιτυχείς,
# - Θα δημιουργεί τόσους υποφακέλους με όνομα dbfolderΝ μέσα στον ROOTFOLDER 
# όσους υποδεικνύει το νούμερο no_of_DBFOLDERS και με τέτοιο τρόπο ώστε να μην 
# κάνει “overwrite” υφιστάμενους φακέλους. Π.χ. αν ο τελευταίος φάκελος που είχε 
# δημιουργηθεί από προηγούμενη εκτέλεση είναι ο dbfolder18 και θέλουμε 6 νέους, θα 
# πρέπει να δημιουργήσει τους dbfolder19, dbfolder20,…,dbfolder24 (αν η παράμετρος 
# είναι 0 δεν θα πρέπει να δημιουργήσει κανέναν).
# - To ίδιο θα πρέπει να ισχύει (δηλαδή να δημιουργούνται χωρίς “overwrite”) και για τους 
# υποφακέλους datafolderN που καθορίζονται από το no_of_DATAFOLDERS.
# - Μετά την δημιουργία των φακέλων, θα χρησιμοποιεί την εντολή chown ώστε να δώσει 
# την κυριότητα των νέων φακέλων στον χρήστη USERNAME.
#
# Απάντηση: Παρακάτω, έχουμε το "script" με όνομα "createpvs.sh" που απαντάει στην "Ερώτηση
# 2", καθώς και την τεκμηρίωση του πηγαίου κώδικα. Αρχικά, για να τρεξει, χωρίς κανένα πρό-
# βλημα, με την εντολή "chmod u+x createpvs.sh" δίνουμε το δικαίωμα στον "user" να εκτελέ-
# σει το "shell script". Τέλος, με το "path" "./createpvs.sh $1 $2 $3 $4", τρέχουμε το 
# "script", όπου "$1" η πρώτη παράμετρος, "$2" η δεύτερη παράμετρος, "$3" η τρίτη παράμετρος
# και "$4" η τέταρτη παράμετρος, όπου εξηγούνται αναλυτικά στην τεκμηρίωση.

chmod u+x createpvs.sh
./createpvs.sh $1 $2 $3 $4

# ΠΗΓΑΙΟΣ ΚΩΔΙΚΑΣ

#! /bin/bash

if [[ $# -ne 4 ]]; then
  echo "Error in parameters"
  echo "Script $0 needs rootfolder, no_of_dbfolders, no_of_datafolders and username"
else

  ROOTFOLDER=$1
  no_of_DBFOLDERS=$2
  no_of_DATAFOLDERS=$3
  USERNAME=$4

  if [[ ! -e $ROOTFOLDER ]]; then
    echo " "
    echo "$ROOTFOLDER does not exist"
    exit 124
  fi
   check_user=`grep ^$USERNAME /etc/passwd | wc -l`
  if [[ $check_user -eq 0 ]]; then
    echo " "
    echo "$USERNAME does not exist"
    exit 125
  fi

  res=$?

  if [[ $res -eq  0 ]]; then

    for ((i=1; i<=$no_of_DBFOLDERS; i++))
    do
        mkdir ./$ROOTFOLDER/dbfolder$i
        res=$?
        if [[ $res -ne 0 ]]; then
          no_of_DBFOLDERS=$(($no_of_DBFOLDERS+1))
        else
          sudo chown $USERNAME:$USERNAME ./$ROOTFOLDER/dbfolder$i
        fi
    done

    for ((j=1; j<=$no_of_DATAFOLDERS; j++))
    do
        mkdir ./$ROOTFOLDER/datafolder$j
        res=$?
        if [[ $res -ne 0 ]]; then
           no_of_DATAFOLDERS=$(($no_of_DATAFOLDERS+1))
        else
          sudo chown $USERNAME:$USERNAME ./$ROOTFOLDER/datafolder$j
        fi
    done
    echo " "
    ls -l $ROOTFOLDER
    echo " "
  fi
fi


# ΤΕΚΜΗΡΙΩΣΗ
#
# ΕΛΕΓΧΟΣ ΠΛΗΘΟΥΣ ΠΑΡΑΜΕΤΡΩΝ
# Το "script" ξεκινάει με τον έλεγχο του πλήθους των παραμέτρων που βάζει ο χρήστης.
# Πιο αναλυτικά, με μία εντολή ελέγχου "if-else" ελέγχει αν το πλήθος των παραμέτρων είναι
# "4". Αν δεν είναι "4", τότε με την εντολή "echo" τυπώνει από τη "standard output" τα
# μηνύματα "Error in parameters" και "Script $0 needs rootfolder, no_of_dbfolders, 
# no_of_datafolders and username", όπου "$0" είναι το περιεχόμενο της παραμέτρου "0" που
# είναι το όνομα του "shell script" (createpvs.sh). Αν είναι "4" τότε εκτελούνται οι εντολές
# της "else" που εξηγούνται παρακάτω.
#
# ΠΑΡΑΜΕΤΡΟΙ 
# Στη μεταβλητή "ROOTFOLDER" εκχωρείται το περιεχόμενο της πρώτης παραμέτρου που 
# είναι ένας κατάλογος.
# Στη μεταβλητή "no_of_DBFOLDERS" εκχωρείται το περιεχόμενο της δεύτερης παραμέτρου που είναι 
# ένας ακέραιος αριθμός που δηλώνει το πλήθος των "dbfolders" που θέλει ο χρήστης να δημιου-
# ργήσει στον κατάλογο "$ROOTFOLDER".
# Στη μεταβλητή "no_of_DATAFOLDERS" εκχωρείται το περιεχόμενο της τρίτης παραμέτρου που είναι 
# ένας ακέραιος αριθμός που δηλώνει το πλήθος των "datafolders" που θέλει ο χρήστης να δημι-
# ουργήσει στον κατάλογο "$ROOTFOLDER".
# Στη μεταβλητή "USERNAME" εκχωρείται το περιεχόμενο της τέταρτης παραμέτρου που είναι το ό-
# νομα ενός χρήστη.
#
# ΕΛΕΓΧΟΣ ΥΠΑΡΞΗΣ ΔΟΘΕΝΤΟΣ ΚΑΤΑΛΟΓΟΥ
# Με μία εντολή ελέγχου "if" ελέγχουμε αν ο δοθέντας κατάλογος υπάρχει στο λειτουργικό σύστη-
# μα (! -e $ROOTFOLDER). Αν δεν υπάρχει, τότε εκτελούνται οι εντολές της "if" που 
# είναι "2" εντολές, η "echo" που τυπώνει το μήνυμα "$ROOTFOLDER does not exist", όπου 
# "$ROOTFOLDER" το όνομα του δοθέντους καταλόγου και η εντολή "exit 124", όπου τερματίζει το
# πρόγραμμα επιστρέφοντας την τιμή "124" (τιμή σφάλματος). Εάν, υπάρχει η ροή του προγράμματος
# μεταφέρεται στις επόμενες εντολές.
#
# ΕΛΕΓΧΟΥΣ ΥΠΑΡΞΗΣ ΔΟΘΕΝΤΟΣ ΧΡΗΣΤΗ
# Στη μεταβλητή "check_user" εκχωρείται το αποτέλεσμα της εντολής "grep ^$USERNAME /etc/passwd 
# | wc -l", όπου κάνει "match" τα "patterns" (grep) που ξεκινάνε (^) με το πρότυπο $USERNAME,
# που έχει δώσει ο χρήστης για τέταρτη παράμετρο. Η εντολή "wc -l" επιστρέφει το πλήθος των 
# γραμμών που επέστρεψε στη "standard output" η "grep", χάρις στη σωλήνωση (|) των δύο εντο-
# λών. Στη συνέχεια, με μία εντολή ελέγχου "if" ελέγχεται το περιεχόμενο της "check_user" και 
# αν περιέχει την τιμή "0", τότε τυπώνεται με την "echo" το μήνυμα "$USERNAME does not exist",
# όπου "$USERNAME" το όνομα του δοθέντος χρήστη και επιστρέφεται με την "exit" στο λειτουργικό
# σύστημα, η τιμή "125" (τιμή σφάλματος). Εάν, δεν περιέχει την τιμή "0" η ροή του προγράμματος
# μεταφέρεται στις επόμενες εντολές.
#
# ΔΗΜΙΟΥΡΓΙΑ "DBFOLDERS"
# Αρχικά, εκχωρείται στη μεταβλητή "res" το περιεχόμενο "$?" που είναι η τιμή που επιστρέφει
# η αμέσως προηγούμενη εντολή. Με μία εντολή ελέγχου "if" ελέγχεται το περιεχόμενο της "res"
# και εφόσον, περιέχει την τιμή "0", τότε με μία εντολή επανάληψης "for" και συνθήκη επανά-
# ληψης "i=1; i<=$no_of_DBFOLDERS; i++", όπου "$no_of_DBFOLDERS" το περιεχόμενο της μεταβλη-
# τής "no_of_DBFOLDERS" που έχει δώσει για δεύτερο όρισμα ο χρήστης δημιουργούνται οι 
# "dbfolders" μέσα στον "$ROOTFOLDER". Αναλυτικά, με την εντολή "mkdir", δημιουργούνται οι 
# υποκατάλογοι με "path" "./$ROOTFOLDER/dbfolder$i" (dbfolder1, dbfolder2 ...), κάθε φορά 
# που εκτελείται ο βρόχος. Εάν, περιέχει την τιμή "0", τότε, η ροή του προγράμματος μεταφέ-
# ρεται στις επόμενες εντολές.
#
# ΑΝΑΚΤΗΣΗ ΔΙΚΑΙΩΜΑΤΩΝ ΤΩΝ "DBFOLDERS" ΣΤΟΝ "USERNAME"
# Αρχικά, εκχωρείται στη μεταβλητή "res" το περιεχόμενο "$?" που είναι η τιμή που επιστρέφει
# η αμέσως προηγούμενη εντολή. Με μία εντολή ελέγχου "if-else" ελέγχεται το περιεχόμενο της
# "res" και εφόσον, δεν περιέχει την τιμή "0", αυξάνεται το περιεχόμενο της μεταβλητής 
# "no_of_DBFOLDERS" κατά "1", ώστε να μην κάνει "overwrite" υφιστάμενους φακέλους σε περί-
# πτώση που δημιουργήθηκαν από προηγούμενη εκτέλεση. Εάν, περιέχει την τιμή "0", τότε, εκτε-
# λούνται οι εντολές της "else". Mε την εντολή "sudo chown $USERNAME:$USERNAME ./$ROOTFOLDER
# /dbfolder$i" δίνεται η κυριότητα των νέων υποκαταλόγων "dbfolders" στον χρήστη "$USERNAME" που έδωσε για τέταρτη παράμετρο ο 
# χρήστης. 
#
# ΔΗΜΙΟΥΡΓΙΑ "DATAOLDERS"
# Mε μία εντολή επανάληψης "for" και συνθήκη επανάληψης "j=1; j<=$no_of_DATAFOLDERS; j++", 
# όπου "$no_of_DATAFOLDERS" το περιεχόμενο της μεταβλητής "no_of_DATAFOLDERS" που έχει δώσει
# για δεύτερο όρισμα ο χρήστης δημιουργούνται οι "datafolders" μέσα στον "$ROOTFOLDER". Ανα-
# λυτικά, με την εντολή "mkdir", δημιουργούνται οι υποκατάλογοι με "path" "./$ROOTFOLDER
# /datafolder$j" (datafolder1, datafolder2 ...), κάθε φορά που εκτελείται ο βρόχος.
#
# ΑΝΑΚΤΗΣΗ ΔΙΚΑΙΩΜΑΤΩΝ ΤΩΝ "DATAFOLDERS" ΣΤΟΝ "USERNAME"
# Αρχικά, εκχωρείται στη μεταβλητή "res" το περιεχόμενο "$?" που είναι η τιμή που επιστρέφει
# η αμέσως προηγούμενη εντολή. Με μία εντολή ελέγχου "if-else" ελέγχεται το περιεχόμενο της
# "res" και εφόσον, δεν περιέχει την τιμή "0", αυξάνεται το περιεχόμενο της μεταβλητής 
# "no_of_DATAFOLDERS" κατά "1", ώστε να μην κάνει "overwrite" υφιστάμενους φακέλους σε περί-
# πτώση που δημιουργήθηκαν από προηγούμενη εκτέλεση. Εάν, περιέχει την τιμή "0", τότε, εκτε-
# λούνται οι εντολές της "else". Mε την εντολή "sudo chown $USERNAME:$USERNAME ./$ROOTFOLDER
# /datafolder$j" δίνεται η κυριότητα των νέων υποκαταλόγων "datafolders" στον χρήστη 
# "$USERNAME" που έδωσε για τέταρτη παράμετρο ο χρήστης. 
#
#
# ΠΑΡΑΔΕΙΓΜΑΤΑ
#
# 
# ΠΑΡΑΔΕΙΓΜΑ 1
#
# Αποτέλεσμα εκτέλεσης της εντολής "./createpvs.sh" :
#
# Error in parameters
# Script ./createpvs.sh needs rootfolder, no_of_dbfolders, no_of_datafolders and username
#
#
# ΠΑΡΑΔΕΙΓΜΑ 2
#
# Αποτέλεσμα εκτέλεσης της εντολής "./createpvs.sh Folder 2 2 root" :
#
# total 16
# drwxrwxr-x 2 root root 4096 Jan 23 23:36 datafolder1
# drwxrwxr-x 2 root root 4096 Jan 23 23:36 datafolder2
# drwxrwxr-x 2 root root 4096 Jan 23 23:35 dbfolder1
# drwxrwxr-x 2 root root 4096 Jan 23 23:36 dbfolder2
#
#
# ΠΑΡΑΔΕΙΓΜΑ 3
#
# Αποτέλεσμα εκτέλεσης της εντολής "./createpvs.sh Folder 2 2 ice19390005" :
#
# cleatotal 32
# drwxrwxr-x 2 ice19390005 ice19390005 4096 Jan 23 23:36 datafolder1
# drwxrwxr-x 2 ice19390005 ice19390005 4096 Jan 23 23:36 datafolder2
# drwxrwxr-x 2 ice19390005 ice19390005 4096 Jan 23 23:38 datafolder3
# drwxrwxr-x 2 ice19390005 ice19390005 4096 Jan 23 23:38 datafolder4
# drwxrwxr-x 2 ice19390005 ice19390005 4096 Jan 23 23:35 dbfolder1
# drwxrwxr-x 2 ice19390005 ice19390005 4096 Jan 23 23:36 dbfolder2
# drwxrwxr-x 2 ice19390005 ice19390005 4096 Jan 23 23:38 dbfolder3
# drwxrwxr-x 2 ice19390005 ice19390005 4096 Jan 23 23:38 dbfolder4




